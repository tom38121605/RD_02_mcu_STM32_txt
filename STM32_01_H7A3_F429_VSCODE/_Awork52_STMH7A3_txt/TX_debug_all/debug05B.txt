
 
   
 

------------------------------------------------------------------------------------


typedef enum 
{
  AUDIO_NODE_OFF, /* node not initialized */
  AUDIO_NODE_INITIALIZED,
  AUDIO_NODE_STARTED,/* node is running */ 
  AUDIO_NODE_STOPPED,
  AUDIO_NODE_ERROR
}
 AUDIO_NodeState_t;


typedef enum 
{
  AUDIO_INPUT,
  AUDIO_OUTPUT,
  AUDIO_CONTROL,
  AUDIO_PROCESSING
}
AUDIO_NodeType_t;



/* Events raised by nodes to session */
typedef enum 
{
  AUDIO_THRESHOLD_REACHED, /* The audio circular buffer threshold is reached , we have enough data to read from the circular buffer */
  AUDIO_BEGIN_OF_STREAM,   /* First packet is written to buffer */
  AUDIO_PACKET_RECEIVED,   /* Packet is received from the USB host */
  AUDIO_PACKET_PLAYED,     /*  packet is played by the speaker */
  AUDIO_OVERRUN,           /*  An overrun is accured on the circular buffer*/
  AUDIO_UNDERRUN,      /*  An underrun is accured on the circular buffer*/
  AUDIO_OVERRUN_TH_REACHED,  /*  An overrun threshold is reached , that means that overrun is soon but not yet reproduced on the circular buffer*/
  AUDIO_UNDERRUN_TH_REACHED, /*  An underrun threshold is reached , that means that underrun is soon but not yet reproduced on the circular buffer*/
  AUDIO_FREQUENCY_CHANGED     /* The host has request sampling rate change, we need to restart nodes and reset the circular buffer */
} AUDIO_SessionEvent_t;
 


-----------------------


typedef struct _Device_cb
{
  uint8_t        (*Init)(struct _USBD_HandleTypeDef *pdev, uint8_t cfgidx);
  uint8_t        (*DeInit)(struct _USBD_HandleTypeDef *pdev, uint8_t cfgidx);
 
  uint8_t       (*Setup)(struct _USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef  *req);
  uint8_t       (*EP0_TxSent)(struct _USBD_HandleTypeDef *pdev);
  uint8_t       (*EP0_RxReady)(struct _USBD_HandleTypeDef *pdev);
 
  uint8_t      (*DataIn)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);
  uint8_t      (*DataOut)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);
  uint8_t      (*SOF)(struct _USBD_HandleTypeDef *pdev);
  uint8_t      (*IsoINIncomplete)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);
  uint8_t      (*IsoOUTIncomplete)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);

  uint8_t       *(*GetHSConfigDescriptor)(uint16_t *length);
  uint8_t       *(*GetFSConfigDescriptor)(uint16_t *length);
  uint8_t       *(*GetOtherSpeedConfigDescriptor)(uint16_t *length);
  uint8_t       *(*GetDeviceQualifierDescriptor)(uint16_t *length);

} USBD_ClassTypeDef;


----------
 


typedef struct
{
  uint8_t   *(*GetDeviceDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t   *(*GetLangIDStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t   *(*GetManufacturerStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t   *(*GetProductStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t   *(*GetSerialStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t   *(*GetConfigurationStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t   *(*GetInterfaceStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
 
} USBD_DescriptorsTypeDef;




  
