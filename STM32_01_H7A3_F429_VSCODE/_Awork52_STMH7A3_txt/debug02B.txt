

UART_HandleTypeDef     huart5;

DMA_HandleTypeDef      hdma_uart5_rx;
DMA_HandleTypeDef       hdma_uart5_tx;




typedef struct
{
  uint32_t BaudRate;     

  uint32_t WordLength;          
  uint32_t StopBits;      
  uint32_t Parity;        

  uint32_t Mode;      
  uint32_t HwFlowCtl;        
  uint32_t OverSampling;       
  uint32_t OneBitSampling;      
  uint32_t ClockPrescaler;     
} UART_InitTypeDef;

typedef struct __UART_HandleTypeDef
{
    USART_TypeDef                        *Instance;                 
    UART_InitTypeDef                      Init;                         
    UART_AdvFeatureInitTypeDef     AdvancedInit;         
    const uint8_t                                 *pTxBuffPtr;         

    uint16_t                                 TxXferSize;                     

    __IO uint16_t                        TxXferCount;            

    uint8_t                                    *pRxBuffPtr;             

    uint16_t                                 RxXferSize;            

    __IO uint16_t                        RxXferCount;         

    uint16_t                                 Mask;                    

    uint32_t                                 FifoMode;                 

    uint16_t                                 NbRxDataToProcess;         

    uint16_t                                 NbTxDataToProcess;            
    __IO HAL_UART_RxTypeTypeDef        ReceptionType;         

    void (*RxISR)(struct __UART_HandleTypeDef *huart);    
    void (*TxISR)(struct __UART_HandleTypeDef *huart);    
    DMA_HandleTypeDef                *hdmatx;                                
    DMA_HandleTypeDef                *hdmarx;                        
    HAL_LockTypeDef                     Lock;                             
    __IO HAL_UART_StateTypeDef        gState;                            
    __IO HAL_UART_StateTypeDef        RxState;                
    __IO uint32_t                                 ErrorCode;         
} UART_HandleTypeDef;

 


typedef struct
{
  __IO uint32_t ISR;    //中断状态标志
  __IO uint32_t Reserved0;
  __IO uint32_t IFCR;  //清中断标志
} DMA_Base_Registers;



typedef struct __DMA_HandleTypeDef
{
  void                            *Instance;                                                        /*!< Register base address                         */
  DMA_InitTypeDef                 Init;                                                             /*!< DMA communication parameters                  */
  HAL_LockTypeDef                 Lock;                                                             /*!< DMA locking object                            */
  __IO HAL_DMA_StateTypeDef       State;                                                            /*!< DMA transfer state                            */
  void                            *Parent;                                                          /*!< Parent object state                           */
  void                            (* XferCpltCallback)( struct __DMA_HandleTypeDef * hdma);         /*!< DMA transfer complete callback                */
  void                            (* XferHalfCpltCallback)( struct __DMA_HandleTypeDef * hdma);     /*!< DMA Half transfer complete callback           */
  void                            (* XferM1CpltCallback)( struct __DMA_HandleTypeDef * hdma);       /*!< DMA transfer complete Memory1 callback        */
  void                            (* XferM1HalfCpltCallback)( struct __DMA_HandleTypeDef * hdma);   /*!< DMA transfer Half complete Memory1 callback   */
  void                            (* XferErrorCallback)( struct __DMA_HandleTypeDef * hdma);        /*!< DMA transfer error callback                   */
  void                            (* XferAbortCallback)( struct __DMA_HandleTypeDef * hdma);        /*!< DMA transfer Abort callback                   */
 __IO uint32_t                    ErrorCode;                                                        /*!< DMA Error code                                */
 uint32_t                         StreamBaseAddress;                                                /*!< DMA Stream Base Address                       */
 uint32_t                         StreamIndex;                                                      /*!< DMA Stream Index                              */
 DMAMUX_Channel_TypeDef           *DMAmuxChannel;                                                   /*!< DMAMUX Channel Base Address                   */
 DMAMUX_ChannelStatus_TypeDef     *DMAmuxChannelStatus;                                             /*!< DMAMUX Channels Status Base Address           */
 uint32_t                         DMAmuxChannelStatusMask;                                          /*!< DMAMUX Channel Status Mask                    */
 DMAMUX_RequestGen_TypeDef        *DMAmuxRequestGen;                                                /*!< DMAMUX request generator Base Address         */
 DMAMUX_RequestGenStatus_TypeDef  *DMAmuxRequestGenStatus;                                          /*!< DMAMUX request generator Status Address       */
 uint32_t                         DMAmuxRequestGenStatusMask;                                       /*!< DMAMUX request generator Status mask          */
}DMA_HandleTypeDef;





