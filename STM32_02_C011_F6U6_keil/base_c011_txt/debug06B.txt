
#define WRITE_REG(REG, VAL)    REG =  VAL 
#define READ_BIT(REG, BIT)        REG  &  BIT 

---------


#define I2C_CR2_AUTOEND              I2C_CR2_AUTOEND_Msk    //1<<25
#define LL_I2C_MODE_AUTOEND                 I2C_CR2_AUTOEND   


#define I2C_CR2_START                I2C_CR2_START_Msk       //1<<13

#define LL_I2C_GENERATE_START_WRITE        (0x8000 0000  | I2C_CR2_START) 
#define LL_I2C_GENERATE_START_READ         (0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN)    ///I2C_CR2_RD_WRN = 1<<10

--------------

const uint8_t aLedOn[]           = "LED ON";

__IO uint8_t    ubNbDataToTransmit   =   sizeof(aLedOn);      //6
uint8_t            *pTransmitBuffer          =   aLedOn;

---

#define LL_I2C_OWNADDRESS1_7BIT             0x00000000U             /*!< Own address 1 is a 7-bit address. */
#define SLAVE_OWN_ADDRESS                       180 

---

#define I2C_OAR1_OA1                 I2C_OAR1_OA1_Msk     //0X3FF

#define I2C_OAR1_OA1MODE             I2C_OAR1_OA1MODE_Msk         //1<<10

#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))

----------------------

EXTI4_15_IRQn                                           = 7,      

#define USER_BUTTON_EXTI_IRQn EXTI4_15_IRQn

#define NVIC_SetPriority                                    __NVIC_SetPriority


__STATIC_INLINE void __NVIC_SetPriority(      IRQn,       priority)
{
      if ( IRQn >= 0)
      {
            NVIC->IP[_IP_IDX(IRQn)]      = ((NVIC->IP[_IP_IDX(IRQn)]      & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
                   (((priority << (8U - __NVIC_PRIO_BITS)) & 0xFFUL) << _BIT_SHIFT(IRQn)));
      }
      else
      {
            SCB->SHP[_SHP_IDX(IRQn)] = ((SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
                   (((priority << (8U - __NVIC_PRIO_BITS)) & 0xFFUL) << _BIT_SHIFT(IRQn)));
      }
}




