 

 

========================i2c master  init================================


main

   MX_GPIO_Init();
   MX_I2C1_Init();

  
------------


 MX_GPIO_Init( )
 
     LL_EXTI_InitTypeDef       EXTI_InitStruct = {0};
     LL_GPIO_InitTypeDef     GPIO_InitStruct = {0};

     //使能GPIO时钟
     LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);   //使能PORTC时钟
     LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);   //使能PORTA时钟
     LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);   //使能PORTB时钟

     LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);     // LED4 为低电平  //PB6

     LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTC, LL_EXTI_CONFIG_LINE13);   //设置PC13为外部中断

     //外部中断初始化
     EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
     EXTI_InitStruct.LineCommand = ENABLE;
     EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
     EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;   //下降沿触发
     LL_EXTI_Init(&EXTI_InitStruct);

     //设置PC13内部上拉
     LL_GPIO_SetPinPull(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_PULL_UP);

     //设置PC13为输入
     LL_GPIO_SetPinMode(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_MODE_INPUT);

     //设置PB6为推拉输出
     GPIO_InitStruct.Pin = LED4_Pin;
     GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
     GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
     LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);

     //设置外部中断的优先级
     //NVIC_SetPriority(EXTI4_15_IRQn, 0);
           __NVIC_SetPriority(7, 0);

     //使能外部中断
     NVIC_EnableIRQ(EXTI4_15_IRQn);

 
------

MX_I2C1_Init()

     LL_I2C_InitTypeDef I2C_InitStruct = {0};
     LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

     //设置I2C时钟源
     LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);

      //使能PORTB时钟
     LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
    
     //初始化SCL端口
     GPIO_InitStruct.Pin = LL_GPIO_PIN_8;                                           //SCL
     GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
     GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
     GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
     LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

     //初始化SDA端口
     GPIO_InitStruct.Pin = LL_GPIO_PIN_9;                                          //SDA
     GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
     GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
     GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
     LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

     //使能 i2c时钟    
     LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);        

     //初始化I2C
     I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
     I2C_InitStruct.Timing = 0x0090273D;
     I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
     I2C_InitStruct.DigitalFilter = 2;
     I2C_InitStruct.OwnAddress1 = 180;
     I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
     I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
     LL_I2C_Init(I2C1, &I2C_InitStruct);

     //待理解
     LL_I2C_EnableAutoEndMode(I2C1);
     LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
     LL_I2C_DisableOwnAddress2(I2C1);
     LL_I2C_DisableGeneralCall(I2C1);
     LL_I2C_EnableClockStretching(I2C1);
    
     //关闭I2C
     LL_I2C_Disable(I2C1);

     /* Configure the SDA setup, hold time and the SCL high, low period */
     LL_I2C_SetTiming(I2C1, I2C_TIMING);      //待理解
    
     //开启I2C
     LL_I2C_Enable(I2C1); 

 

========================i2c master  write================================


main


      WaitForUserButtonPress();

      Handle_I2C_Master();


------

WaitForUserButtonPress( )
 
      while (ubButtonPress == 0)   //快闪小灯，等等按键按下
      
            LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
            LL_mDelay(LED_BLINK_FAST);
      
      
      //如果按键按下，则关闭小灯
      LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 

-------

发送数据过程：

   { SLA + 7Bit + 设发送长度len + autoend + Start + W } --   (从机地址已匹配 + W标志 + 清地址匹配标志 + ack)

   -- { TXIS + data0 } -- (RXNE + 从机读数据+ Ack)   ......  {TXIS + datan} -- (RXNE + 从机读数据+ Ack) -- Stop标志 -- (Stop事件） --两边清stop标志 


--------------------------------------------

Handle_I2C_Master( )
 

      //设置发送长度，写入Start, 写入发送地址addrW, 设置autoend
      LL_I2C_HandleTransfer(I2C1, 180, 0, 6,    1<<25,     0x80000000U | 1<<13 );  //addr，7Bit，len，autoend，start


      while (!LL_I2C_IsActiveFlag_STOP(I2C1))    //如过STOP标志=0，有数据未发完
             
            if (LL_I2C_IsActiveFlag_TXIS(I2C1))    //收到从机Ack     
       
                  //LL_I2C_TransmitData8(I2C1, (*pTransmitBuffer++));
                         WRITE_REG(I2Cx->TXDR, Data);     //TXDR = Data， 主机发送一个字节的数据


      //清楚stop标志
      LL_I2C_ClearFlag_STOP(I2C1);

      LED_On();
 


------

//参数： I2C1, 180, 0, 6,     1<<25,    1<<13 | 0<<10 （Start + W）
  LL_I2C_HandleTransfer( *I2Cx,   SlaveAddr,   SlaveAddrSize,  TransferSize,   EndMode,  Request)
{
  MODIFY_REG(I2Cx->CR2,

             I2C_CR2_SADD | I2C_CR2_ADD10 |
             (I2C_CR2_RD_WRN &  (Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,

             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}




========================i2c master  reader================================


main

      WaitForUserButtonPress();

      Handle_I2C_Master_Reader();



---------------------------------------


Handle_I2C_Master_Reader( )

      LL_I2C_HandleTransfer(I2C1, SLAVE_OWN_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ); 
 
      while (!LL_I2C_IsActiveFlag_STOP(I2C1)) 
 
            if (LL_I2C_IsActiveFlag_RXNE(I2C1))               
                  aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);        
   
      LL_I2C_ClearFlag_STOP(I2C1);
   
      iputbytes1(aReceiveBuffer,ubReceiveIndex-1);   //--test
  
 





